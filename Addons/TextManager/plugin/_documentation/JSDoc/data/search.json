{"list":[{"title":"TextManagerRuntimeDOMHandler","link":"<a href=\"TextManagerRuntimeDOMHandler.html\">TextManagerRuntimeDOMHandler</a>"},{"title":"TextManagerRuntimeInstance","link":"<a href=\"TextManagerRuntimeInstance.html\">TextManagerRuntimeInstance</a>","description":"create class."},{"title":"TextManagerRuntimePlugin","link":"<a href=\"TextManagerRuntimePlugin.html\">TextManagerRuntimePlugin</a>","description":"Initialize plugin in runtime."},{"title":"TextManagerRuntimeType","link":"<a href=\"TextManagerRuntimeType.html\">TextManagerRuntimeType</a>","description":"Initialize plugin in runtime."},{"title":"TextManagerEditorInstance","link":"<a href=\"TextManagerEditorInstance.html\">TextManagerEditorInstance</a>","description":"Create class."},{"title":"TextManagerEditorPlugin","link":"<a href=\"TextManagerEditorPlugin.html\">TextManagerEditorPlugin</a>","description":"Create plugin's basic editor settings."},{"title":"TextManagerEditorType","link":"<a href=\"TextManagerEditorType.html\">TextManagerEditorType</a>","description":"create class."},{"title":"DOMHandler","link":"<a href=\"external-DOMHandler.html\">DOMHandler</a>","description":"This class run in the runtime side. <br><br> The DOMHandler interface is a base class for DOM-side scripts (typically in domSide.js). This means it does not have access to the runtime, since in Web Worker mode the runtime is hosted in a separate JavaScript context within the worker. However the DOM-side script does have access to the full DOM APIs, e.g. document, and using the messaging methods can communicate with the runtime. See DOM calls in the C3 runtime for more information."},{"title":"SDKInstanceBase","link":"<a href=\"external-SDKInstanceBase.html\">SDKInstanceBase</a>","description":"The SDKInstanceBase interface is used as the base class for runtime instances in the SDK. For \"world\" type plugins, instances instead derive from SDKWorldInstanceBase which itself derives from SDKInstanceBase."},{"title":"SDKPluginBase","link":"<a href=\"external-SDKPluginBase.html\">SDKPluginBase</a>","description":"The SDKPluginBase interface is used as the base class for your plugin in the runtime."},{"title":"SDKTypeBase","link":"<a href=\"external-SDKTypeBase.html\">SDKTypeBase</a>","description":"The SDKTypeBase interface is used as the base class for runtime object types in the SDK. An object type corresponds to an object listed in the Project Bar. Object types may have multiple instances."},{"title":"IInstanceBase","link":"<a href=\"external-IInstanceBase.html\">IInstanceBase</a>","description":"The IInstanceBase interface is used as the base class for instances in the SDK. For \"world\" type plugins, instances instead derive from IWorldInstanceBase, which itself derives from IInstanceBase."},{"title":"IPluginBase","link":"<a href=\"external-IPluginBase.html\">IPluginBase</a>","description":"The main configuration for a plugin."},{"title":"ITypeBase","link":"<a href=\"external-ITypeBase.html\">ITypeBase</a>","description":"Plugin type definition in editor. It is constant class, follow API example."},{"title":"Acts","link":"<a href=\"C3.Plugins.RobotKaposzta_TextManager.Acts.html\">Acts</a>"},{"title":"Cnds","link":"<a href=\"C3.Plugins.RobotKaposzta_TextManager.Cnds.html\">Cnds</a>"},{"title":"Exps","link":"<a href=\"C3.Plugins.RobotKaposzta_TextManager.Exps.html\">Exps</a>"},{"title":"WordObject","link":"<a href=\"global.html#WordObject\">WordObject</a>","description":"WordObject type definition"},{"title":"ParamScheme","link":"<a href=\"global.html#ParamScheme\">ParamScheme</a>","description":"ParamScheme type definition"}]}