[h1]Text Manager[/h1]
The [b]Text Manager[/b] object and behavior provide text features such as load text in different languages, prameter insert text, encoding text.

[h2]Localization code:[/h2]
Localization format first 2 letters mean language code the other 2 letters mean Country or Region code, except simplified and tradition chinese (zh-hans, zh-hant). The language codes are lowecase in ISO 639-1 format, that you can find [url=https://www.w3schools.com/tags/ref_language_codes.asp]here[/url]. The country codes are uppercase and the list find [url=https://www.w3schools.com/tags/ref_country_codes.asp]here[/url]. Use correct format because the plugin might return wrong value when get language or county code. Example for some languages: en-US, en-GB, hu-HU, es-ES.

[h2]Data formats:[/h2]
Following formats are support in Text Manager plugin when load.
[dl sans-serif]
	[dt]JSON (single)[/dt]
	[dd]JSON file that contain 1 language. In language import you have to add which language data is. Example for JSON format:
		[code lang="javascript"]
		{
			"example": {
				"name": "Example name",
				"desc": "Decription example."
			}
		}
		[/code]
		The data will be:
		[table]
			[thead]
				[tr]
					[td]Key name[/td]
					[td]Value[/td]
				[/tr]
			[/thead]
			[tr]
				[td]example.name[/td]
				[td]Example name[/td]
			[/tr]
			[tr]
				[td]example.desc[/td]
				[td]Decription example.[/td]
			[/tr]
		[/table]
	[/dd]

	[dt]JSON (multiple)[/dt]
	[dd]JSON file that contain multiple language. The last layer of the JSON file have to contain the language code. Caution: you have to add the correct language code because any misspelling will add the data to other language code. Example for JSON format:
		[code lang="javascript"]
		{
			"example": {
				"name": {
					"en-US": "Example name",
					"hu-HU": "Példa név"
				},
				"desc": : {
					"en-US": "Decription example.",
					"hu-HU": "Leírás példa."
				}
			}
		}
		[/code]
		The data will be:
		[table]
			[thead]
				[tr]
					[td]Key name[/td]
					[td]en-US[/td]
					[td]hu-HU[/td]
				[/tr]
			[/thead]
			[tr]
				[td]example.name[/td]
				[td]Example name[/td]
				[td]Példa név[/td]
			[/tr]
			[tr]
				[td]example.desc[/td]
				[td]Decription example.[/td]
				[td]Leírás példa.[/td]
			[/tr]
		[/table]

	[/dd]

	[dt]CSV[/dt]
	[dd]CSV file format to import data, in file you have to define header in first row to identify the imported language. In language Example for CSV format:
		[code lang="javascript"]
			"key","en-US","hu-HU"
			"example.name","Example,name","Példa, név"
			"example.desc","ecription example.","Leírás példa."
		[/code]
		The data will be:
		[table]
			[thead]
				[tr]
					[td]Key name[/td]
					[td]en-US[/td]
					[td]hu-HU[/td]
				[/tr]
			[/thead]
			[tr]
				[td]example.name[/td]
				[td]Example name[/td]
				[td]Példa név[/td]
			[/tr]
			[tr]
				[td]example.desc[/td]
				[td]Decription example.[/td]
				[td]Leírás példa.[/td]
			[/tr]
		[/table]
	[/dd]

	[dt]Dictionary[/dt]
	[dd]Construct 3 dictionary data to import 1 language. In language import you have to add which language data is.[/dd]

	[dt]Array[/dt]
	[dd]Construct 3 array data to import multiple language. In header (first row) the first column is the key, the other header columns will identify the language. If you use 3D array every sheet need a header row. See CSV (with header) for example.[/dd]
[/dl]

[h2]Parameter formats:[/h2]
[dl sans-serif]
Text Manager allow to insert paramert in the text (e.g. "Hello my name is {player}" -> "Hello my name is Mario").
The open character is "{" and the close character is "}". For escape use backslash "\{" or "\}".
Between the open and close characters means the name of the parameter (e.g. "Hello my name is {player}" -> "player" the parameter name).
[/dl]

[h2]Text Manager properties:[/h2]
[dl sans-serif]
	[dt]All language[/dt]
	[dd]All available language for the project separate with newlines. For the language format see above. Note: comma, space, semicolon separated values will be converted to newline separated value.[/dd]

	[dt]Default language[/dt]
	[dd]The default language that project use if other languages not supported. For the language format see above. All language have to contain the language.[/dd]

	[dt]Language save[/dt]
	[dd]Enable or disable to save the language settings in LocalStorage. If enable the plugin will set the setted language when user reopen the project.[/dd]

	[dt]State save[/dt]
	[dd]Enable or disable to save the language data when construct saves. Note: this might cause big save files.[/dd]

	[dt]Import format[/dt]
	[dd]Initial import format. Read below how to use different formats.[/dd]

	[dt]Import mode[/dt]
	[dd]How to load languauge data at start.[/dd]

	[dt]Import source[/dt]
	[dd]File means newline separated file list, Data means text data like JSON or CSV. Note: this couse load triggers after start.[/dd]

	[dt]Import language[/dt]
	[dd]Only for JSON (single) and Dictionary types. For File mode you can use newline separated language list for different files.[/dd]

	[dt]Import tag[/dt]
	[dd]Comma separated tags for the initaial import. For File mode you can use newline separated language list for different files.[/dd]
	
	[dt]Convert tool[/dt]
	[dd]Convert tool a built in tool that only access in editor (no effect for the project). It helps to convert language data between formats. Following parameters have to use: [b]Input format[/b]: which format you want to convert from; [b]Input[/b]: The data that have to convert; [b]Input language[/b]: Only for JSON (single) and Dictionary types. [b]Output format[/b]: which format you want to convert; At the end press the convert link and the result appear in [b]Output[/b] field.[/dd]
[/dl]

[h2]Text Manager conditions:[/h2]
[dl sans-serif]
	[dt]On language change[/dt]
	[dd]Triggered when project's language changed with 'Set language'.[/dd]

	[dt]On device language change[/dt]
	[dd]Triggered when user change the language in device.[/dd]

	[dt]Is language supported[/dt]
	[dd]True if language supported. Select different support types to check. If Language parameter leave empty condition will use the project's languages[/dd]

	[dt]On data load[/dt]
	[dt]On data load error[/dt]
	[dd]Triggers when language data load is success/fails.[/dd]

	[dt]Is parameter text valid[/dt]
	[dd]True if the text has correct parameter format.[/dd]
[/dl]

[h2]Text Manager actions:[/h2]
[dl sans-serif]
	[dt]Set language[/dt]
	[dd]Set the project's language if available.[/dd]

	[dt]Add language[/dt]
	[dd]Add a language option to the project.[/dd]

	[dt]Remove language[/dt]
	[dd]Remove a language from available list if not used.[/dd]

	[dt]Load data[/dt]
	[dt]Load data file[/dt]
	[dd]Load language file from data/file. For formats information read below. NOTE: use language parameter for JSON (single) and Dictionary formats.[/dd]

	[dt]Unload by key[/dt]
	[dd]Unload data on the selected tags. 'Delete anyway' delete the data. 'Delete only tag' only delete the tag reference from the data.[/dd]
	
	[dt]Unload by tag[/dt]
	[dd]Unload data az key value. Note: Might cause tags with zero data.[/dd]
[/dl]

[h2]Text Manager expressions:[/h2]
[dl sans-serif]
	[dt]LanguageCount[/dt]
	[dd]Get the supported language count.[/dd]

	[dt]Language[/dt]
	[dd]Get the current language. If use Language(at) parameter get language from the avaliable language list at zero-based index.[/dd]

	[dt]DeviceLanguageCount[/dt]
	[dd]Get the device language list count.[/dd]
	
	[dt]DeviceLanguageAt[/dt]
	[dd]Get the device language form device language list at zero-based index.[/dd]

	[dt]SuggestedLanguage[/dt]
	[dd]Choose a best fit language. If use SuggestedLanguage(LangList) parameter the expression will choose from the language from the LangList (contains comma separated languages). Return empty string if non of the languages supported. [/dd]

	[dt]GetLanguageSection[/dt]
	[dt]GetRegionSection[/dt]
	[dd]Cut a region/language code section form a full ISO language code[/dd]
	
	[dt]LoadTag[/dt]
	[dd]In 'On data load' or 'On data load error' trigger get tag name. NOTE: if use comma separated tags it will return that.[/dd]
	
	[dt]LoadError[/dt]
	[dd]In 'On data load error' trigger get the error name[/dd]
	
	[dt]TagCount[/dt]
	[dt]TagAt[/dt]
	[dd]Get available tag count and the tag name at zero-based index.[/dd]

	[dt]KeyCount[/dt]
	[dt]KeyAt[/dt]
	[dd]Get available key count and the key name at zero-based index. NOTE: Optional, use the tag parameter to filter keys with tag e.g: KeyCount(tag), KeyAt(at, tag) [/dd]

	[dt]Translate[/dt]
	[dd]Get a key's value.[/dd]
	
	[dt]ParamKeyCount[/dt]
	[dt]ParamKeyAt[/dt]
	[dd]Get avaliable key count and key name at zero-based index.[/dd]

	[dt]ParamKeyCountAt[/dt]
	[dt]ParamKeyStart[/dt]
	[dt]ParamKeyEnd[/dt]
	[dd]Get a specific key's count int the text. And the Nth key's start and end positions.[/dd]

	[dt]ParamTextNum[/dt]
	[dd]Pass a value to numeral parameters. Nth parameters means the number (from zero). If isFillEmpty is 1 the other params fill with empty text. If isStringParams is 1 you can pass all parameters in 1 comma separated string. ParamTextNum(text, isFillEmpty, isStringParams, ZeroParam(optional), FirstParam(optional) ...);
	ParamTextNum(text, isFillEmpty, 1, AllParamsWithComma)
	[/dd]

	[dt]ParamTextKey[/dt]
	[dd]Pass a value to numeral/key parameters. If isFillEmpty is 1 the other params fill with empty text. If isStringParams is 1 you can pass all parameters in 1 comma separated string. ParamTextKey(text, isFillEmpty, isStringParams, Key1, Value1, Key2, Value2);
	ParamTextKey(text, isFillEmpty, 1, AllParamsWithComma)[/dd]
	
	[dt]Escaping[/dt]
	[dd]Escape or remove escape form the text. If IsDescape is 1 expression will remove the escape. If isStringParams is 1 you can pass all parameters in 1 comma separated string. e.g: Escaping(text, isDescape, isStringParams, Char1, Escape1, Char2, Escape2); Escaping(text, isDescape, isStringParams, "{", "\{", "}", "\}",);[/dd]
[/dl]



